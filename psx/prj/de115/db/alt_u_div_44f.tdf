--alt_u_div DEVICE_FAMILY="Cyclone IV E" LPM_PIPELINE=0 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=3 WIDTH_N=6 WIDTH_Q=6 WIDTH_R=3 denominator numerator quotient remainder
--VERSION_BEGIN 12.1 cbx_cycloneii 2012:11:07:18:22:16:SJ cbx_lpm_abs 2012:11:07:18:22:16:SJ cbx_lpm_add_sub 2012:11:07:18:22:16:SJ cbx_lpm_divide 2012:11:07:18:22:16:SJ cbx_mgl 2012:11:07:18:24:04:SJ cbx_stratix 2012:11:07:18:22:16:SJ cbx_stratixii 2012:11:07:18:22:16:SJ cbx_util_mgl 2012:11:07:18:22:16:SJ  VERSION_END


-- Copyright (C) 1991-2012 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION add_sub_7pc (dataa[0..0], datab[0..0])
RETURNS ( cout, result[0..0]);
FUNCTION add_sub_8pc (dataa[1..0], datab[1..0])
RETURNS ( cout, result[1..0]);

--synthesis_resources = lut 19 
SUBDESIGN alt_u_div_44f
( 
	denominator[2..0]	:	input;
	numerator[5..0]	:	input;
	quotient[5..0]	:	output;
	remainder[2..0]	:	output;
) 
VARIABLE 
	add_sub_0 : add_sub_7pc;
	add_sub_1 : add_sub_8pc;
	add_sub_2_result_int[3..0]	:	WIRE;
	add_sub_2_cout	:	WIRE;
	add_sub_2_dataa[2..0]	:	WIRE;
	add_sub_2_datab[2..0]	:	WIRE;
	add_sub_2_result[2..0]	:	WIRE;
	add_sub_3_result_int[4..0]	:	WIRE;
	add_sub_3_cout	:	WIRE;
	add_sub_3_dataa[3..0]	:	WIRE;
	add_sub_3_datab[3..0]	:	WIRE;
	add_sub_3_result[3..0]	:	WIRE;
	add_sub_4_result_int[4..0]	:	WIRE;
	add_sub_4_cout	:	WIRE;
	add_sub_4_dataa[3..0]	:	WIRE;
	add_sub_4_datab[3..0]	:	WIRE;
	add_sub_4_result[3..0]	:	WIRE;
	add_sub_5_result_int[4..0]	:	WIRE;
	add_sub_5_cout	:	WIRE;
	add_sub_5_dataa[3..0]	:	WIRE;
	add_sub_5_datab[3..0]	:	WIRE;
	add_sub_5_result[3..0]	:	WIRE;
	DenominatorIn[27..0]	: WIRE;
	DenominatorIn_tmp[27..0]	: WIRE;
	gnd_wire	: WIRE;
	nose[41..0]	: WIRE;
	NumeratorIn[41..0]	: WIRE;
	NumeratorIn_tmp[41..0]	: WIRE;
	prestg[23..0]	: WIRE;
	quotient_tmp[5..0]	: WIRE;
	sel[20..0]	: WIRE;
	selnose[41..0]	: WIRE;
	StageIn[27..0]	: WIRE;
	StageIn_tmp[27..0]	: WIRE;
	StageOut[23..0]	: WIRE;

BEGIN 
	add_sub_0.dataa[0..0] = NumeratorIn[5..5];
	add_sub_0.datab[0..0] = DenominatorIn[0..0];
	add_sub_1.dataa[] = ( StageIn[4..4], NumeratorIn[10..10]);
	add_sub_1.datab[1..0] = DenominatorIn[5..4];
	add_sub_2_result_int[] = (0, add_sub_2_dataa[]) - (0, add_sub_2_datab[]);
	add_sub_2_result[] = add_sub_2_result_int[2..0];
	add_sub_2_cout = !add_sub_2_result_int[3];
	add_sub_2_dataa[] = ( StageIn[9..8], NumeratorIn[15..15]);
	add_sub_2_datab[] = DenominatorIn[10..8];
	add_sub_3_result_int[] = (0, add_sub_3_dataa[]) - (0, add_sub_3_datab[]);
	add_sub_3_result[] = add_sub_3_result_int[3..0];
	add_sub_3_cout = !add_sub_3_result_int[4];
	add_sub_3_dataa[] = ( StageIn[14..12], NumeratorIn[20..20]);
	add_sub_3_datab[] = DenominatorIn[15..12];
	add_sub_4_result_int[] = (0, add_sub_4_dataa[]) - (0, add_sub_4_datab[]);
	add_sub_4_result[] = add_sub_4_result_int[3..0];
	add_sub_4_cout = !add_sub_4_result_int[4];
	add_sub_4_dataa[] = ( StageIn[18..16], NumeratorIn[25..25]);
	add_sub_4_datab[] = DenominatorIn[19..16];
	add_sub_5_result_int[] = (0, add_sub_5_dataa[]) - (0, add_sub_5_datab[]);
	add_sub_5_result[] = add_sub_5_result_int[3..0];
	add_sub_5_cout = !add_sub_5_result_int[4];
	add_sub_5_dataa[] = ( StageIn[22..20], NumeratorIn[30..30]);
	add_sub_5_datab[] = DenominatorIn[23..20];
	DenominatorIn[] = DenominatorIn_tmp[];
	DenominatorIn_tmp[] = ( DenominatorIn[23..0], ( gnd_wire, denominator[]));
	gnd_wire = B"0";
	nose[] = ( B"000000", add_sub_5_cout, B"000000", add_sub_4_cout, B"000000", add_sub_3_cout, B"000000", add_sub_2_cout, B"000000", add_sub_1.cout, B"000000", add_sub_0.cout);
	NumeratorIn[] = NumeratorIn_tmp[];
	NumeratorIn_tmp[] = ( NumeratorIn[35..0], numerator[]);
	prestg[] = ( add_sub_5_result[], add_sub_4_result[], add_sub_3_result[], GND, add_sub_2_result[], B"00", add_sub_1.result[], B"000", add_sub_0.result[]);
	quotient[] = quotient_tmp[];
	quotient_tmp[] = ( (! selnose[0..0]), (! selnose[7..7]), (! selnose[14..14]), (! selnose[21..21]), (! selnose[28..28]), (! selnose[35..35]));
	remainder[2..0] = StageIn[26..24];
	sel[] = ( gnd_wire, (sel[20..20] # DenominatorIn[26..26]), (sel[19..19] # DenominatorIn[25..25]), gnd_wire, (sel[17..17] # DenominatorIn[22..22]), (sel[16..16] # DenominatorIn[21..21]), gnd_wire, (sel[14..14] # DenominatorIn[18..18]), (sel[13..13] # DenominatorIn[17..17]), gnd_wire, (sel[11..11] # DenominatorIn[14..14]), (sel[10..10] # DenominatorIn[13..13]), gnd_wire, (sel[8..8] # DenominatorIn[10..10]), (sel[7..7] # DenominatorIn[9..9]), gnd_wire, (sel[5..5] # DenominatorIn[6..6]), (sel[4..4] # DenominatorIn[5..5]), gnd_wire, (sel[2..2] # DenominatorIn[2..2]), (sel[1..1] # DenominatorIn[1..1]));
	selnose[] = ( (! nose[41..41]), (! nose[40..40]), (! nose[39..39]), ((! nose[38..38]) # sel[20..20]), ((! nose[37..37]) # sel[19..19]), ((! nose[36..36]) # sel[18..18]), (! nose[35..35]), (! nose[34..34]), (! nose[33..33]), ((! nose[32..32]) # sel[17..17]), ((! nose[31..31]) # sel[16..16]), ((! nose[30..30]) # sel[15..15]), (! nose[29..29]), (! nose[28..28]), (! nose[27..27]), ((! nose[26..26]) # sel[14..14]), ((! nose[25..25]) # sel[13..13]), ((! nose[24..24]) # sel[12..12]), (! nose[23..23]), (! nose[22..22]), (! nose[21..21]), ((! nose[20..20]) # sel[11..11]), ((! nose[19..19]) # sel[10..10]), ((! nose[18..18]) # sel[9..9]), (! nose[17..17]), (! nose[16..16]), (! nose[15..15]), ((! nose[14..14]) # sel[8..8]), ((! nose[13..13]) # sel[7..7]), ((! nose[12..12]) # sel[6..6]), (! nose[11..11]), (! nose[10..10]), (! nose[9..9]), ((! nose[8..8]) # sel[5..5]), ((! nose[7..7]) # sel[4..4]), ((! nose[6..6]) # sel[3..3]), (! nose[5..5]), (! nose[4..4]), (! nose[3..3]), ((! nose[2..2]) # sel[2..2]), ((! nose[1..1]) # sel[1..1]), ((! nose[0..0]) # sel[0..0]));
	StageIn[] = StageIn_tmp[];
	StageIn_tmp[] = ( StageOut[23..0], B"0000");
	StageOut[] = ( ((( StageIn[22..20], NumeratorIn[30..30]) & selnose[35..35]) # (prestg[23..20] & (! selnose[35..35]))), ((( StageIn[18..16], NumeratorIn[25..25]) & selnose[28..28]) # (prestg[19..16] & (! selnose[28..28]))), ((( StageIn[14..12], NumeratorIn[20..20]) & selnose[21..21]) # (prestg[15..12] & (! selnose[21..21]))), ((( StageIn[10..8], NumeratorIn[15..15]) & selnose[14..14]) # (prestg[11..8] & (! selnose[14..14]))), ((( StageIn[6..4], NumeratorIn[10..10]) & selnose[7..7]) # (prestg[7..4] & (! selnose[7..7]))), ((( StageIn[2..0], NumeratorIn[5..5]) & selnose[0..0]) # (prestg[3..0] & (! selnose[0..0]))));
END;
--VALID FILE
