// Top module for the MIPS processor core
module system_top(
	input  logic        CLOCK_50,
	input  logic [3:0]  KEY,
	output logic [17:0] LEDR,

	/* SDRAM CHIP INTERFACE */
	output logic [12:0] DRAM_ADDR,
	output logic [1:0]  DRAM_BA,
	output logic        DRAM_CAS_N, DRAM_RAS_N, DRAM_CLK,
	output logic        DRAM_CKE, DRAM_CS_N, DRAM_WE_N,
	output logic [3:0]  DRAM_DQM,
	inout  wire  [31:0] DRAM_DQ
    );

    // processor signals
    wire        clk, inst_excpt, mem_excpt, halted;
    wire [29:0] pc, mem_addr;
    wire [31:0] inst, mem_data_in, mem_data_out;
    wire [3:0]  mem_write_en;
    reg  [10:0] psx_int;
    wire        inst_read, mem_data_read;
    reg         inst_ready, mem_data_ready;

    // DRAM signals
    wire [31:0] dram_dq_out;
    wire [31:0] dram_dq_in;
    wire        dram_oe_out;

    assign DRAM_DQ     = dram_oe_out ? dram_dq_in : {32{1'bz}};
    assign dram_dq_out = DRAM_DQ;
    assign clk         = CLOCK_50;
    assign rst         = ~KEY[0];
    assign LEDR[15:0]  = ({pc, 2'b0} == 32'h000000B0) ? 16'hFF : 16'h0;

    // MIPS core
    Processor core (
            .clock(clk), .reset(rst),

            // interrupts; IP is for diagnostics
            .Interrupts(5'h0), .NMI(1'b0), .IP(),
            .PSX_Interrupts(psx_int),

            // data access
            .DataMem_Ready(mem_data_ready), .DataMem_Read(mem_data_read),
            .DataMem_In(mem_data_out), .DataMem_Write(mem_write_en),
            .DataMem_Address(mem_addr), .DataMem_Out(mem_data_in),

            // instruction access
            .InstMem_In(inst), .InstMem_Address(pc),
            .InstMem_Ready(inst_ready), .InstMem_Read(inst_read),
            .halted(halted));
    
    // Memory
    mem_controller memory(
            .clk(clk), .rst(rst),

            /* SDRAM CHIP INTERFACE */
            .dram_addr      (DRAM_ADDR),
            .dram_bank      (DRAM_BA),
            .dram_cas_n     (DRAM_CAS_N),
            .dram_cke       (DRAM_CKE),
            .dram_clk       (),
            .dram_cs_n      (DRAM_CS_N),
            .dram_dqm       (DRAM_DQM),
            //inout  wire  [31:0] dram_dq,
            .dram_ras_n     (DRAM_RAS_N),
            .dram_we_n      (DRAM_WE_N),
            .dram_dq_in     (dram_dq_in),
            .dram_dq_out    (dram_dq_out),
            .dram_oe_out    (dram_oe),

            /* CPU DATA */
    	    .data_addr      ({mem_addr, 2'b0}),
    	    .data_data_i    (mem_data_in),
    	    .data_ren       (mem_data_read), 
    	    .data_wen       (mem_write_en),
    	    .data_ack       (mem_data_ready),
    	    .data_data_o    (mem_data_out),

    	    /* CPU INSTRCTION */
    	    .inst_addr      ({pc, 2'b0}),
    	    .inst_ren       (inst_read),
    	    .inst_ack       (inst_ready),
    	    .inst_data_o    (inst),

            /* GPU SIGNALS */
            .to_gp0         (),
            .to_gp1         (),
            .gpu_ren        (),
            .gpu_rdy        (),
            .gpu_fifo_full  (),
            .gpu_stat       (), 
            .gpu_read       (),
            .gp0            (),
            .gp1            (),

            /* HW REGISTER CONNECTIONS */
            .hblank         (clk),
            .vblank         (clk),
            .dotclock       (clk),

            /* INTERRUPTS */
            .interrupts     (psx_int)
            );
endmodule
